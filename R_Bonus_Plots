### Load necessary R packages
## Note: requires R Version 4.0.0 at least, as well as Rtools4
library(ggplot2)
library(Matrix)
library(rjson)
library(cowplot)
library(RColorBrewer)
library(grid)
library(readbitmap)
library(Seurat)
library(dplyr)
library(hdf5r)
library(data.table)

### Write spatial mapping function
geom_spatial <-  function(mapping = NULL,
                          data = NULL,
                          stat = "identity",
                          position = "identity",
                          na.rm = FALSE,
                          show.legend = NA,
                          inherit.aes = FALSE,
                          ...) {
  
  GeomCustom <- ggproto(
    "GeomCustom",
    Geom,
    setup_data = function(self, data, params) {
      data <- ggproto_parent(Geom, self)$setup_data(data, params)
      data
    },
    
    draw_group = function(data, panel_scales, coord) {
      vp <- grid::viewport(x=data$x, y=data$y)
      g <- grid::editGrob(data$grob[[1]], vp=vp)
      ggplot2:::ggname("geom_spatial", g)
    },
    
    required_aes = c("grob","x","y")
    
  )
  
  layer(
    geom = GeomCustom,
    mapping = mapping,
    data = data,
    stat = stat,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(na.rm = na.rm, ...)
  )
}

## Indicate Sample names
sample_names <- c("GeX-Test-A1", "GeX-Test-B1", "GeX-Test-C1", "GeX-Test-D1")
sample_names

## Indicate paths to files
image_paths <- c("Path/to/GeX-Test-A1/outs/spatial/tissue_lowres_image.png",
                 "Path/to/GeX-Test-B1/outs/spatial/tissue_lowres_image.png",
                 "Path/to/GeX-Test-C1/outs/spatial/tissue_lowres_image.png",
                 "Path/to/GeX-Test-D1/outs/spatial/tissue_lowres_image.png")

scalefactor_paths <- c("Path/to/GeX-Test-A1/outs/spatial/scalefactors_json.json",
                       "Path/to/GeX-Test-B1/outs/spatial/scalefactors_json.json",
                       "Path/to/GeX-Test-C1/outs/spatial/scalefactors_json.json",
                       "Path/to/GeX-Test-D1/outs/spatial/scalefactors_json.json")

tissue_paths <- c("Path/to/GeX-Test-A1/outs/spatial/tissue_positions_list.csv",
                  "Path/to/GeX-Test-B1/outs/spatial/tissue_positions_list.csv",
                  "Path/to/GeX-Test-C1/outs/spatial/tissue_positions_list.csv",
                  "Path/to/GeX-Test-D1/outs/spatial/tissue_positions_list.csv")

cluster_paths <- c("Path/to/GeX-TEst-A1/outs/analysis/clustering/graphclust/clusters.csv",
                   "Path/to/GeX-TEst-B1/outs/analysis/clustering/graphclust/clusters.csv",
                   "Path/to/GeX-TEst-C1/outs/analysis/clustering/graphclust/clusters.csv",
                   "Path/to/GeX-TEst-D1/outs/analysis/clustering/graphclust/clusters.csv")

matrix_paths <- c("Path/to/GeX-Test-A1/outs/filtered_feature_bc_matrix.h5",
                  "Path/to/GeX-Test-B1/outs/filtered_feature_bc_matrix.h5",
                  "Path/to/GeX-Test-C1/outs/filtered_feature_bc_matrix.h5",
                  "Path/to/GeX-Test-D1/outs/filtered_feature_bc_matrix.h5")


### Read in Images

images_cl <- list()

for (i in 1:length(sample_names)) {
  images_cl[[i]] <- read.bitmap(image_paths[i])
}

height <- list()

for (i in 1:length(sample_names)) {
  height[[i]] <-  data.frame(height = nrow(images_cl[[i]]))
}

height <- bind_rows(height)

width <- list()

for (i in 1:length(sample_names)) {
  width[[i]] <- data.frame(width = ncol(images_cl[[i]]))
}

width <- bind_rows(width)

### Convert to grobs
grobs <- list()
for (i in 1:length(sample_names)) {
  grobs[[i]] <- rasterGrob(images_cl[[i]], width=unit(1,"npc"), height=unit(1,"npc"))
}

images_tibble <- tibble(sample=factor(sample_names), grob=grobs)
images_tibble$height <- height$height
images_tibble$width <- width$width


scales <- list()

for (i in 1:length(sample_names)) {
  scales[[i]] <- rjson::fromJSON(file = scalefactor_paths[i])
}

### Read in clusters
clusters <- list()
for (i in 1:length(sample_names)) {
  clusters[[i]] <- read.csv(cluster_paths[i])
}

### Combine clusters and tissue information
bcs <- list()

for (i in 1:length(sample_names)) {
  bcs[[i]] <- read.csv(tissue_paths[i],col.names=c("barcode","tissue","row","col","imagerow","imagecol"), header = FALSE)
  bcs[[i]]$imagerow <- bcs[[i]]$imagerow * scales[[i]]$tissue_lowres_scalef    # scale tissue coordinates for lowres image
  bcs[[i]]$imagecol <- bcs[[i]]$imagecol * scales[[i]]$tissue_lowres_scalef
  bcs[[i]]$tissue <- as.factor(bcs[[i]]$tissue)
  bcs[[i]] <- merge(bcs[[i]], clusters[[i]], by.x = "barcode", by.y = "Barcode", all = TRUE)
  bcs[[i]]$height <- height$height[i]
  bcs[[i]]$width <- width$width[i]
}

names(bcs) <- sample_names

### Read in matrix, barcode, and genes
matrix <- list()

for (i in 1:length(sample_names)) {
  matrix[[i]] <- as.data.frame(t(Read10X_h5(matrix_paths[i])))
}

### Make Summary data frames
umi_sum <- list() 

for (i in 1:length(sample_names)) {
  umi_sum[[i]] <- data.frame(barcode =  row.names(matrix[[i]]),
                             sum_umi = Matrix::rowSums(matrix[[i]]))
  
}
names(umi_sum) <- sample_names

umi_sum <- bind_rows(umi_sum, .id = "sample")

## Total genes per spot
gene_sum <- list() 

for (i in 1:length(sample_names)) {
  gene_sum[[i]] <- data.frame(barcode =  row.names(matrix[[i]]),
                              sum_gene = Matrix::rowSums(matrix[[i]] != 0))
  
}
names(gene_sum) <- sample_names

gene_sum <- bind_rows(gene_sum, .id = "sample")

### Merge all data
bcs_merge <- bind_rows(bcs, .id = "sample")
bcs_merge <- merge(bcs_merge,umi_sum, by = c("barcode", "sample"))
bcs_merge <- merge(bcs_merge,gene_sum, by = c("barcode", "sample"))

#### Plotting
xlim(0,max(bcs_merge %>% 
             filter(sample ==sample_names[i]) %>% 
             select(width)))

myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))


### Total UMI per tissue spot covered
plots <- list()

for (i in 1:length(sample_names)) {
  
  plots[[i]] <- bcs_merge %>% 
    filter(sample ==sample_names[i]) %>% 
    ggplot(aes(x=imagecol,y=imagerow,fill=sum_umi)) +
    geom_spatial(data=images_tibble[i,], aes(grob=grob), x=0.5, y=0.5)+
    geom_point(shape = 21, colour = "black", size = 1.75, stroke = 0.5)+
    coord_cartesian(expand=FALSE)+
    scale_fill_gradientn(colours = myPalette(100))+
    xlim(0,max(bcs_merge %>% 
                 filter(sample ==sample_names[i]) %>% 
                 select(width)))+
    ylim(max(bcs_merge %>% 
               filter(sample ==sample_names[i]) %>% 
               select(height)),0)+
    xlab("") +
    ylab("") +
    ggtitle(sample_names[i])+
    labs(fill = "Total UMI")+
    theme_set(theme_bw(base_size = 10))+
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_blank(), 
          axis.line = element_line(colour = "black"),
          axis.text = element_blank(),
          axis.ticks = element_blank())
}

plot_grid(plotlist = plots)


### Total genes per spot
plots <- list()

for (i in 1:length(sample_names)) {
  
  plots[[i]] <- bcs_merge %>% 
    filter(sample ==sample_names[i]) %>% 
    ggplot(aes(x=imagecol,y=imagerow,fill=sum_gene)) +
    geom_spatial(data=images_tibble[i,], aes(grob=grob), x=0.5, y=0.5)+
    geom_point(shape = 21, colour = "black", size = 1.75, stroke = 0.5)+
    coord_cartesian(expand=FALSE)+
    scale_fill_gradientn(colours = myPalette(100))+
    xlim(0,max(bcs_merge %>% 
                 filter(sample ==sample_names[i]) %>% 
                 select(width)))+
    ylim(max(bcs_merge %>% 
               filter(sample ==sample_names[i]) %>% 
               select(height)),0)+
    xlab("") +
    ylab("") +
    ggtitle(sample_names[i])+
    labs(fill = "Total Genes")+
    theme_set(theme_bw(base_size = 10))+
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_blank(), 
          axis.line = element_line(colour = "black"),
          axis.text = element_blank(),
          axis.ticks = element_blank())
}

plot_grid(plotlist = plots)


### Cluster Spot
plots <- list()

for (i in 1:length(sample_names)) {
  
  plots[[i]] <- bcs_merge %>% 
    filter(sample ==sample_names[i]) %>%
    filter(tissue == "1") %>% 
    ggplot(aes(x=imagecol,y=imagerow,fill=factor(Cluster))) +
    geom_spatial(data=images_tibble[i,], aes(grob=grob), x=0.5, y=0.5)+
    geom_point(shape = 21, colour = "black", size = 1.75, stroke = 0.5)+
    coord_cartesian(expand=FALSE)+
    scale_fill_manual(values = c("#b2df8a","#e41a1c","#377eb8","#4daf4a","#ff7f00","gold", "#a65628", "#999999", "black", "grey", "white", "purple"))+
    xlim(0,max(bcs_merge %>% 
                 filter(sample ==sample_names[i]) %>% 
                 select(width)))+
    ylim(max(bcs_merge %>% 
               filter(sample ==sample_names[i]) %>% 
               select(height)),0)+
    xlab("") +
    ylab("") +
    ggtitle(sample_names[i])+
    labs(fill = "Cluster")+
    guides(fill = guide_legend(override.aes = list(size=3)))+
    theme_set(theme_bw(base_size = 10))+
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_blank(), 
          axis.line = element_line(colour = "black"),
          axis.text = element_blank(),
          axis.ticks = element_blank())
}

plot_grid(plotlist = plots)


### Genes of interest
## Change gene symbol under "bind_cols" and "ggplot...fill"

plots <- list()

for (i in 1:length(sample_names)) {
  
  plots[[i]] <- bcs_merge %>% 
    filter(sample ==sample_names[i]) %>% 
    bind_cols(as.data.table(matrix[i])[, "Gene_Symbol", with=FALSE]) %>% 
    ggplot(aes(x=imagecol,y=imagerow,fill=Gene_Symbol)) +
    geom_spatial(data=images_tibble[i,], aes(grob=grob), x=0.5, y=0.5)+
    geom_point(shape = 21, colour = "black", size = 1.75, stroke = 0.5)+
    coord_cartesian(expand=FALSE)+
    scale_fill_gradientn(colours = myPalette(100))+
    xlim(0,max(bcs_merge %>% 
                 filter(sample ==sample_names[i]) %>% 
                 select(width)))+
    ylim(max(bcs_merge %>% 
               filter(sample ==sample_names[i]) %>% 
               select(height)),0)+
    xlab("") +
    ylab("") +
    ggtitle(sample_names[i])+
    theme_set(theme_bw(base_size = 10))+
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_blank(), 
          axis.line = element_line(colour = "black"),
          axis.text = element_blank(),
          axis.ticks = element_blank())
}

plot_grid(plotlist = plots)
